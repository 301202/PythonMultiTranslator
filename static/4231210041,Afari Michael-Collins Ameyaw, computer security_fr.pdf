NOM : AFARI MICHAEL -COLLINS AMEYAW NUMÉRO D'INDEX : 4231210041 COU RSE : NIVEAU DE SÉCURITÉ INFORMATIQUE 400 écrire un programme Java pour simuler le modèle de sécurité Bell -LaPadula importer java.util.HashMap ; importer java.util.Map ; enum SecurityLevel { LOW, MEDIUM, HIGH } class Sujet { private String name ; niveau de sécurité privé clearLevel ; sujet public (nom de chaîne, niveau de sécurité niveau de autorisation) { this.name = nom ; this.clearanceLevel = clearanceLevel ; } public String getName() { nom de retour ; }

public SecurityLevel getClearanceLevel() { return clearanceLevel ; } } objet de classe { nom de chaîne privé ; classificationLevel de sécurité privée; données de chaîne privées ; Objet public (nom de chaîne, niveau de classification SecurityLevel, données de chaîne) { this.name = nom ; this.classificationLevel = classificationLevel; this.data = données ; } public String getName() { nom de retour ; } public SecurityLevel getClassificationLevel() { return classificationLevel; } public String getData() { return data ; }

public void setData (String data) { this.data = data; } } class BellLaPadula { private Map<String, Subject> sujets = new HashMap<>(); private Map<String, Object> objets = new HashMap<>(); public void addSubject(Sujet sujet) { sujets.put(sujet.getName(), sujet); } public void addObject (objet objet) { objets.put (objet.getName (), objet); } public boolean canRead(String subjectName, String objectName) { Sujet sujet = sujets.get(subjectName); Objet objet = objets.get(objectName); if (subject != null && object != null) { return subject.getClearanceLevel().ordinal() >= object.getClassificationLevel().ordinal(); } renvoie faux ; }

public boolean canWrite(String subjectName, String objectName) { Sujet sujet = sujets.get(subjectName); Objet objet = objets.get(objectName); if (subject != null && object != null) { return subject.getClearanceLevel().ordinal() <= object.getClassificationLevel().ordinal(); } renvoie faux ; } public void read(String subjectName, String objectName) { if (canRead(subjectName, objectName)) { System.out.println(subjectName + " reads: " + objects.get(objectName).getData()); } else { System.out.println (subjectName + " n'est pas autorisé à lire " + objectName); } } public void write(String subjectName, String objectName, String data) { if (canWrite(subjectName, objectName)) {objects.get(objectName).setData(data); System.out.println(subjectName + " écrit : " + data + " à " + objectName ); } else { System.out.println (subjectName + " n'est pas autorisé à écrire dans " + objectName); } } }

public class BellLaPadulaSimulation { public static void main(String[] args) { BellLaPadula blp = new BellLaPadula(); Sujet michael = nouveau Sujet(" Michael ", SecurityLevel.HIGH); Sujet collins = nouveau sujet(" Collins ", SecurityLevel.MEDIUM); Sujet ameyaw = new Subject(" Ameyaw ", SecurityLevel.LOW); Objet doc1 = new Object("Doc1", SecurityLevel.HIGH, "Données Top Secret"); Objet doc2 = new Object("Doc2", SecurityLevel.MEDIUM, "Données confidentielles"); Objet doc3 = new Object("Doc3", SecurityLevel.LOW, "Public Data"); blp.addSubject( michael ); blp.addSubject( collins ); blp.addSubject( ameyaw ); blp.addObject(doc1); blp.addObject(doc2); blp.addObject(doc3); blp.read("Michael", "Doc1"); // Autorisé blp.read(" Collins ", "Doc1"); // Non autorisé blp.read(" Ameyaw ", "Doc3"); // Autorisé blp.write(" Michael ", "Doc3", "Nouvelles données publiques"); // Non autorisé blp.write(" Ameyaw ", "Doc3", "New Public Data"); // Autorisé }

}