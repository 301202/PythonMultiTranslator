GHANA COMMUNICATION TECHNOLOGY UNIVERSITY FACULTY OF COMPUTING AND INFORMATION SYSTEMS DEPARTMENT OF COMPUTER SCIENCE Title: Multi language Translator A Project Work Submitted in Partial Fulfillment of the Requirements For BSc. Computer Science BY: McEben-Nornormey Lord Selorm - 4231210092 Tamakloe Daniel Seyram - 4231210097 SUPERVISOR: Mr. Isaac Baffour Senkyire November, 2024 1

DECLARATION This project is presented as part of the requirement for BSC. in Computer Science awarded by Ghana Communication Technology University. We hereby declare that this project is entirely the result of hard work, research and enquiries. All sources of information have however been acknowledged with due respect. AUTHORS: Tamakloe Daniel Seyram SIGNATURE .......................................... ID: 4231210097 DATE........................................ McEben-Nornormey Lord Selorm SIGNATURE....................................... ID: 4231210092 DATE........................................ SUPERVISOR: Mr. Isaac Baffour Senkyire SIGNATURE.................................... DATE.......................................... HOD: Dr. Emmanuel Freeman SIGNATURE.................................... DATE.......................................... 2

ABSTRACT In an increasingly interconnected world, online chat rooms serve as pivotal platforms for global communication, transcending geographical barriers. However, language differences often hinder seamless interaction, necessitating the role of translators. This project explores the integration of real- time conference translators into chat room environments to facilitate fluid communication among diverse linguistic groups. The project begins with a comprehensive analysis of existing chat room dynamics and translation methodologies, highlighting the challenges associated with language barriers. Leveraging advancements in natural language processing (NLP) and machine translation (MT), we propose a novel architecture for embedding real-time conference translators directly into chat interfaces. Key components of the proposed system include language detection algorithms to identify user languages, dynamic translation engines capable of handling multilingual conversations, and intuitive user interfaces for seamless interaction. Additionally, the project emphasizes the importance of preserving context and tone during translation to ensure accurate and culturally sensitive communication. To evaluate the effectiveness of the system, extensive testing will be conducted across diverse chat room scenarios, assessing factors such as translation accuracy, latency, and user satisfaction. Feedback from users and moderators will be crucial in refining the system's functionality and optimizing its performance. Overall, this project aims to revolutionize online communication by empowering users to engage in meaningful conversations across language barriers. By integrating real-time conference translators into chat room environments, we envision a future where language diversity enriches rather than inhibits global discourse. 3

Table of Contents DECLARATION........................................................................................................................................ 2 ABSTRACT............................................................................................................................................... 3 Chapter One............................................................................................................................................... 6 1.0. Introduction.................................................................................................................................... 6 1.1. Background Of Study ..................................................................................................................... 6 1.2. Problem Statement ......................................................................................................................... 7 1.3. Aim Of Study.................................................................................................................................. 8 Project Objectives ................................................................................................................................. 8 1.4. Significance Of Study .................................................................................................................... 9 1.4.1. Relevance of the Study to Society ........................................................................................ 10 1.4.2. Relevance of the Study to Academia .................................................................................... 10 1.4.3. Relevance of the Project to the Government ............................................................................. 10 1.5. Organization of the Study ............................................................................................................. 12 Chapter Two: Literature Review .............................................................................................................. 13 2.0. Introduction.................................................................................................................................. 13 2.1. Multi Language Translator ........................................................................................................... 13 2.2. History of Translators and Chat services ...................................................................................... 14 2.3. Global Impact of Translators and Chat services ........................................................................... 15 2.4. Types of Translators ..................................................................................................................... 15 2.5. Types of Chat services .................................................................................................................. 17 2.6. Benefits of Multi Language Translator ........................................................................................ 18 2.7. Challenges facing Chat services ................................................................................................... 18 2.8. Review of Existing Systems ......................................................................................................... 19 2.9. Summary...................................................................................................................................... 20 2.10. Conclusion.................................................................................................................................. 20 Chapter Three........................................................................................................................................... 21 3.0. Introduction.................................................................................................................................. 21 3.1. Software Development Methodology .......................................................................................... 21 3.1.1. Agile Methodology ............................................................................................................... 21 3.1.2. Why Choose Agile Methodology ......................................................................................... 22 3.1.3. Disadvantages of Waterfall Methodology ............................................................................ 23 3.2. Feasibility of the Implemented System ........................................................................................ 24 3.3. Functional Requirements .............................................................................................................. 25 3.4. Non-Functional Requirements ..................................................................................................... 27 3.5. Hardware Components Requirement ........................................................................................... 29 3.6. Software Requirements ................................................................................................................ 30 3.7. System Architecture and Design .................................................................................................. 31 3.8. Flowchart Diagrams ..................................................................................................................... 34 3.8.1. Text Translation Flowchart ................................................................................................... 34 3.8.2. Room Creation Flowchart .................................................................................................... 35 3.8.3. User Joining Room Flowchart .............................................................................................. 36 3.9. Use Case Diagram ........................................................................................................................ 37 3.10. Sequence Diagram ...................................................................................................................... 38 Fig 6. A sequence diagram showing how messages get translated ..................................................... 38 3.11. Activity Diagram ........................................................................................................................ 39 4

Fig 7. An activity diagram of the Application ..................................................................................... 39 3.12. Conclusion.................................................................................................................................. 40 Chapter 4.................................................................................................................................................. 41 4.1. Development................................................................................................................................ 41 4.1.1. Programming Languages and Tools Used ............................................................................ 41 4.1.2. Implementation Details ......................................................................................................... 41 4.2 Testing........................................................................................................................................... 43 4.2.0. Unit Testing........................................................................................................................... 43 4.2.1. Integration Testing ................................................................................................................ 46 4.2.2. Performance Testing ............................................................................................................. 50 4.2.3. Security Testing .................................................................................................................... 50 4.2.4. Usability Testing ................................................................................................................... 50 4.3. Conclusion............................................................................................................................... 50 Chapter 5.................................................................................................................................................. 51 5.1. Discussion.................................................................................................................................... 51 5.1.1. Comparison with Existing Systems ...................................................................................... 51 5.1.2. Challenges Faced .................................................................................................................. 52 5.1.3. Lessons Learned ................................................................................................................... 52 5.1.4. Contributions to the Field ..................................................................................................... 53 5.1.5. Future Work .......................................................................................................................... 53 5.2. Conclusion.................................................................................................................................... 53 Appendices............................................................................................................................................... 54 Appendix A. Code Snippets ............................................................................................................ 54 Appendix B: Screenshots .................................................................................................................... 66 References................................................................................................................................................ 70 5

Chapter One 1.0. Introduction In today's interconnected world, the diversity of languages presents a significant challenge to communication. This has led to the development of multilanguage translator solutions, which provide comprehensive translation capabilities across various devices and languages. These solutions integrate robust Translator APIs into chat settings, enabling real-time, context-aware translation within messaging platforms. This facilitates seamless multilingual conversations, enhancing inclusivity and global connectivity. However, challenges such as privacy concerns and ensuring accurate real-time translations remain. Despite these challenges, the integration of Translator APIs in chat environments represents a significant advancement in cross-cultural communication, promising a future where linguistic barriers are easily overcome. Integration of multilanguage translation capabilities through Translator APIs in chat settings represents a pivotal advancement in cross-cultural communication. By enabling real-time, context-aware translation within chat environments, these solutions empower users to engage in multilingual conversations effortlessly, fostering inclusivity, understanding, and collaboration on a global scale. 1.1. Background Of Study The study of multilanguage translation and the integration of Translator APIs into chat settings com - bines linguistics, computer science, human-computer interaction, and artificial intelligence. This field has gained significant attention due to the growing need for seamless communication across lan - 6

guages in a connected world. It aims to overcome language barriers by developing sophisticated algo - rithms and systems for translating text, speech, and visual content across various languages and de - vices. The evolution of this field began with rule-based machine translation, progressed through statistical machine translation (SMT), and advanced significantly with neural machine translation (NMT) in the 2010s, which improved fluency and accuracy using deep learning models. The rise of digital communi - cation platforms and mobile devices has increased demand for real-time translation, particularly in chat settings. Translator APIs are crucial for enabling real-time translation within chat applications, leveraging natu - ral language processing (NLP), machine learning, and cloud computing to provide accurate and con - text-aware translations. Effective integration involves addressing usability, accessibility, and user ex - perience design while ensuring privacy and security through robust protocols and data protection measures. In summary, the interdisciplinary study of multilanguage translation in chat settings aims to facilitate effective communication across languages and cultures, driven by technological innovation and glob - alization, and promises a more connected and inclusive future. 1.2. Problem Statement The aim of this final project is to tackle the challenges and opportunities in developing and implementing multi language translation systems, specifically focusing on integrating Translator APIs within chat settings. The project seeks to enhance cross-cultural communication, foster inclusivity, and advance translation technology by ensuring high accuracy and contextual relevance in real-time translations. Key challenges include developing advanced algorithms for understanding language nuances, generating coherent translations, and optimizing translation quality while minimizing latency and computational overhead. Additionally, the project will design user-friendly interfaces, seamless Translator API integration, and explore interaction modalities and privacy features to enhance usability and user experience. Privacy and security are crucial, addressed by implementing robust encryption, data anonymization, and compliance mechanisms to protect user confidentiality and ensure the integrity of translation data. The project will also investigate the scalability and interoperability of translation solutions across various devices, operating systems, and communication protocols, promoting universal access and inclusivity. In summary, this project aims to improve translation accuracy, user experience, privacy, and scalability in multi language translation within chat settings. By leveraging advanced technologies and user- centered design, it seeks to advance translation technology and promote cross-cultural communication in an interconnected world. 7

1.3. Aim Of Study The aim of the study on this topic (multilanguage translator or Conference Translators) is to address the challenges and opportunities inherent in facilitating seamless multilingual communication across various devices within chat environments. The primary goal is to develop and implement innovative solutions that enhance translation accuracy, user experience, privacy, scalability, and interoperability in multilanguage translation systems. Project Objectives To design and develop a robust multilanguage translator system capable of seamlessly translating messages exchanged across various devices within chat settings. The system should support real-time translation across multiple languages and adapt to the linguistic preferences and device configurations of users. To Integrate Translator APIs into the chat setting to enable seamless translation functionalities. Explore and evaluate different Translator APIs available, considering factors such as translation accuracy, language coverage, and ease of integration with chat platforms. To Investigate techniques to improve translation accuracy and quality within the chat setting. Explore advanced machine translation algorithms, natural language processing techniques, and neural network models to enhance the contextual understanding and coherence of translations. To Design user-friendly interfaces and intuitive interaction modalities that seamlessly integrate translation features into chat platforms. Prioritize simplicity, accessibility, and customization to enhance user experience and facilitate effortless multilingual communication. To Implement robust encryption protocols, data anonymization techniques, and compliance mechanisms to ensure the privacy and security of user communications within the chat setting. Mitigate risks associated with the transmission and storage of sensitive linguistic data. To Ensure the scalability and interoperability of the translator system across different devices, operating systems, and communication protocols. Develop platform-agnostic translation APIs that support a wide range of languages and devices to facilitate universal access to multidevice, multilanguage translation capabilities. 8

To Evaluate the performance, usability, and effectiveness of the developed translator system through user studies, usability testing, and performance benchmarks. Gather feedback from end-users to identify areas for improvement and inform iterative development. To Disseminate research findings, project outcomes, and developed software through academic publications, conference presentations, and collaboration with industry partners and regulatory bodies. Foster collaboration and knowledge sharing to contribute to the advancement of multidevice, multi language translation technology. 1.4. Significance Of Study Studying multi language translator systems and their integration with Translator APIs in chat settings is highly significant in our interconnected world. This research delves into the intersection of language, technology, and communication, offering transformative implications across various domains. At its core, this study addresses the fundamental need for effective communication across linguistic barriers. In a globalized society, seamless multilingual communication is invaluable. Multilanguage translator systems integrated into chat settings connect individuals from diverse cultural and linguistic backgrounds. By enabling real-time translation within chat environments, this research promotes inclusivity and breaks down communication barriers. It empowers individuals to engage, share ideas, and collaborate irrespective of their native language, fostering a sense of belonging and promoting diversity in digital communities. Integrating Translator APIs into chat settings enhances user experience by simplifying communication processes. Users can communicate effortlessly without external translation tools, leading to smoother and more enjoyable interactions, building stronger connections, and fostering meaningful relationships. From a business perspective, multi language translator systems offer significant advantages in the global marketplace. They facilitate communication with international clients, partners, and customers, enabling businesses to expand their reach and capitalize on new opportunities. These systems also streamline collaboration among global teams, increasing productivity and efficiency. Technologically, this research drives innovation in natural language processing, machine translation, and artificial intelligence. By advancing translation technology, researchers contribute to the development of more accurate, efficient, and scalable translation systems, impacting various fields such as education, healthcare, and international diplomacy. 9

Culturally, multi language translator systems promote exchange and understanding by facilitating communication between speakers of different languages. They enable individuals to share perspectives and ideas, fostering mutual respect and appreciation for diverse cultures, enriching society, and promoting empathy and understanding across linguistic boundaries. Understanding the implications of integrating Translator APIs into chat settings is also essential for safeguarding user privacy and security. By studying privacy-preserving techniques and security measures, researchers can ensure that sensitive linguistic data remains confidential and protected from unauthorized access. In summary, studying multi language translator systems and their integration with Translator APIs in chat settings is significant for its transformative impact on communication, technology, business, culture, and society. By exploring this intersection, researchers contribute to building a more connected, inclusive, and technologically advanced world. 1.4.1. Relevance of the Study to Society Studying multi language translator systems, and their integration with Translator APIs in chat settings is relevant to society as it addresses pressing needs related to communication, access to information, inclusion, and technological advancement, ultimately contributing to the building of a more connected and harmonious global community. 1.4.2. Relevance of the Study to Academia Studying multi language translator systems, and their integration with Translator APIs in chat settings is relevant to academia because it advances research, fosters interdisciplinary collaboration, has practical educational applications, addresses ethical considerations, promotes international collaboration, facilitates industry partnerships, and informs policy and regulation. 1.4.3. Relevance of the Project to the Government The scope of studying a multi language translator for government applications encompasses a broad and detailed analysis of various facets critical to effective implementation and utilization. Initially, the study begins with identifying the specific needs and use cases within different government sectors where such a tool would prove beneficial. This involves understanding how government agencies, officials, and the public could leverage translation technology in contexts like immigration services, international diplomacy, public safety, and emergency response. 10

A thorough examination of existing translation technologies forms the next phase, where the focus is on evaluating their accuracy, reliability, and language coverage. The study assesses how well these technologies function across different devices, ensuring compatibility with smartphones, tablets, desktops, and specialized government equipment. The aim is to identify the best possible solutions that meet the high standards required for government operations. Integrating the translation tool into existing government systems and workflows is another critical aspect. This requires designing a user-friendly interface tailored to the diverse needs of government employees and the public, while ensuring the system is scalable to handle varying volumes of translation requests. The integration process also includes examining how well the tool can be embedded into current technological frameworks without causing significant disruptions. Security and privacy considerations are paramount, given the sensitive nature of government communications. The study investigates how the translation tool can comply with stringent government standards for data security and privacy, addressing potential risks and ensuring that sensitive information remains protected. A comprehensive cost-benefit analysis is conducted to understand the financial implications of developing, deploying, and maintaining the translation tool. This involves evaluating the potential economic benefits such as cost savings, increased efficiency, and improved public service delivery against the costs involved. Training and support are crucial for the successful adoption of the technology. The study outlines the development of training programs for government employees and the establishment of a support infrastructure to address technical issues and user queries. Legal and ethical considerations are also thoroughly examined. The study ensures that the translation tool complies with relevant laws and regulations, including accessibility standards and language rights, and addresses ethical issues such as bias in translation and the potential impact on minority languages. Pilot testing is an essential component of the study, involving real-world trials in selected government departments to evaluate the tool’s performance. Feedback from these pilot programs helps refine and improve the technology, ensuring it meets the practical needs of its users. Finally, the study remains forward-looking, monitoring emerging technologies and trends in the field of translation to ensure the solution remains current and effective. It involves developing a long-term strategy for continuous improvement and adaptation, ensuring that the government can effectively respond to evolving needs and technological advancements. This comprehensive approach ensures that all aspects of implementing a multi language translator for government use are thoroughly explored and addressed. 11

1.5. Organization of the Study The organization of a study on multi language translator systems, and their integration with Translator APIs in chat settings typically follows a structured approach to ensure thorough exploration of the topic and effective communication of findings. Here's a suggested organization for such a study: 1. Introduction: - Provide an overview of the research topic, including the significance and relevance of studying multi language translator systems in chat settings. - Define key terms and concepts, such as multidevice translation, multilanguage support, Translator APIs, and chat integration. - Present the research objectives, questions, and hypotheses guiding the study. 2. Literature Review: - Review existing literature related to multidevice translator systems, multilanguage translation, chat integration, and relevant technologies such as NLP and machine translation. - Summarize previous research, methodologies, findings, and gaps in the literature. - Identify theoretical frameworks or models that inform the study. 3. Conditions and Recommendations: - Present the results of system testing and evaluation, including performance metrics, usability feedback, and user satisfaction surveys. - Discuss any challenges encountered during the evaluation process and how they were addressed. 12

Chapter Two: Literature Review 2.0. Introduction Multi language translator systems, integrated with Translator APIs in chat settings, revolutionize cross- language communication in our globalized and digitalized world. These systems allow real-time translation across various devices, enhancing cross-cultural understanding, collaboration, and accessibility. Supporting multiple languages, they cater to diverse linguistic backgrounds, facilitating multilingual conversations in domains such as education, business, healthcare, and travel. Integrating Translator APIs into chat applications enables seamless message translation, removing the need for external tools. This literature review examines the evolution, challenges, opportunities, and implications of these technologies, aiming to identify gaps and future research areas in this dynamic field. 2.1. Multi Language Translator Multi language translator systems, and their integration with Translator APIs in chat settings represent a transformative approach to language translation and communication in our increasingly connected world. These systems combine advanced technologies such as natural language processing, machine learning, and cloud-based APIs to enable seamless translation of conversations across different devices and languages within chat environments. The concept of multi language translation systems addresses the need for flexible and accessible translation solutions that transcend device boundaries. Users can seamlessly transition between smartphones, tablets, computers, and other devices while maintaining continuity in their translated conversations. This versatility ensures that individuals can access translation services wherever they are, whether at home, in transit, or in a professional setting. In addition to supporting multiple devices, these systems also cater to the linguistic diversity of global populations. By offering multi language capabilities, users can communicate in their preferred language while seamlessly translating messages from and into other languages within chat platforms. 13

This enables individuals from different linguistic backgrounds to engage in multilingual conversations, collaborate across borders, and access information in their native languages. The integration of Translator APIs into chat settings further enhances the functionality and usability of these multi language translator systems. By leveraging Translator APIs, chat platforms can seamlessly integrate translation capabilities directly into their interfaces, allowing users to translate messages in real-time without the need for external translation tools or services. This integration streamlines the communication process, reduces language barriers, and fosters more inclusive and accessible interactions among users. Overall, multi language translator systems, and their integration with Translator APIs in chat settings hold immense potential to facilitate cross-cultural communication, support language learning, and promote global collaboration in diverse contexts. As these technologies continue to evolve, it is crucial to explore their implications for communication, accessibility, and cultural exchange, as well as address challenges related to accuracy, privacy, and user experience. 2.2. History of Translators and Chat services The history of translators and chat services is a fascinating narrative that illustrates the evolution of communication technology and its impact on global connectivity. Early on, translation was a manual process, carried out by linguists, scholars, and interpreters. Written translations were painstakingly created, often requiring significant time and effort. Meanwhile, communication across distances was facilitated by chat services in the form of letters, telegraphs, and eventually telephones, allowing for real-time interaction albeit without automated translation capabilities. The emergence of machine translation (MT) in the mid-20th century marked a significant turning point. Early pioneers in computational linguistics, such as Warren Weaver and Yehoshua Bar-Hillel, laid the groundwork for MT research. The landmark Georgetown-IBM experiment in 1954 showcased the feasibility of automatic translation using computers, igniting interest and investment in the field. In the subsequent decades, rule-based MT systems became prevalent. These systems relied on linguistic rules, dictionaries, and grammatical structures to translate text between languages. Examples include the SYSTRAN system developed by IBM and the ALPAC report, which evaluated the quality and feasibility of machine translation. With the advent of the internet and digital communication platforms, chat services underwent a transformative shift. Messaging apps, social media platforms, and chatbots revolutionized how people communicate, enabling instant messaging and real-time interactions across the globe. Concurrently, translation capabilities were integrated into chat services, allowing users to communicate seamlessly across language barriers. 14

2.3. Global Impact of Translators and Chat services In today's globalized world, multi language translator systems with integrated Translator APIs in chat settings significantly impact communication dynamics. These technologies revolutionize communication by enabling real-time translation, fostering global connections, and enhancing cross- cultural understanding and inclusivity. They drive innovation in natural language processing and machine learning, improving translation accuracy and expanding applications in education and international diplomacy. However, challenges like privacy concerns, algorithmic bias, and cultural sensitivity need to be addressed. Promoting digital literacy and cultural awareness is essential for responsible multilingual communication. Overall, these technologies transform global communication and accessibility while requiring careful consideration of ethical and societal issues. 2.4. Types of Translators 1. Human Translators: Human translators play a central role in linguistic mediation, leveraging their language proficiency, cultural competence, and contextual understanding to accurately convey meaning across languages. From professional translators and interpreters to bilingual individuals and language enthusiasts, human translators bring a nuanced understanding of language and culture to the translation process, making them indispensable in domains such as literature, diplomacy, and international business. 2. Machine Translation (MT) Systems: Machine translation systems automate the process of translating text from one language to another using computational algorithms and linguistic models. These systems can be categorized into several types based on their underlying methodologies: - *Rule-Based Machine Translation (RBMT): RBMT systems rely on linguistic rules, dictionaries, and grammatical structures to generate translations. While they offer explicit control over translation rules, RBMT systems may struggle with capturing idiomatic expressions and linguistic nuances. - Statistical Machine Translation (SMT): SMT systems analyze large corpora of parallel texts to identify statistical patterns and generate translations based on probabilistic models. SMT has demonstrated improved translation quality and fluency compared to rule-based approaches but may struggle with handling rare or unseen language pairs. - Neural Machine Translation (NMT): NMT systems leverage deep learning architectures, such as recurrent neural networks (RNNs) and transformers, to directly model the mapping between source and target languages. NMT has achieved state-of-the-art performance in translation accuracy and 15

fluency, capturing contextual information and syntactic structures more effectively than previous approaches. 3. Hybrid Translation Systems: Hybrid translation systems combine elements of both human and machine translation to leverage the strengths of each approach. These systems may involve pre-editing by human translators, post-editing of machine-generated translations, or collaborative workflows that blend human and machine contributions. Hybrid approaches aim to balance translation quality, efficiency, and cost-effectiveness in diverse translation scenarios. 4. Crowdsourced Translation Platforms: Crowdsourced translation platforms harness the collective intelligence of online communities to translate content collaboratively. These platforms enable individuals from around the world to contribute translations, review each other's work, and improve translation quality through peer feedback. While crowdsourcing offers scalability and diversity in translation resources, it may also pose challenges related to quality control, consistency, and linguistic expertise. 5. Specialized Translation Tools: Specialized translation tools cater to specific domains or industries, offering tailored features and functionalities to meet the unique requirements of professional translators. Examples include computer-assisted translation (CAT) tools, terminology management systems, and localization platforms. These tools enhance translator productivity, streamline workflow processes, and ensure consistency and accuracy in translation projects. 2.5. Types of Chat services The landscape of chat services has evolved rapidly with advancements in technology, offering diverse platforms and functionalities for communication, collaboration, and social interaction. This literature review explores the different types of chat services, ranging from instant messaging apps to virtual chatbots, and their implications for personal communication, business engagement, and digital culture. 1. Instant Messaging (IM) Apps: Instant messaging apps enable real-time text-based communication between users, either individually or in group chats. Platforms like WhatsApp, Facebook Messenger, and WeChat dominate the instant 16

messaging landscape, offering features such as text chat, voice and video calls, multimedia sharing, and encrypted messaging. IM apps have become essential tools for personal communication, connecting friends, families, and colleagues across different devices and networks. 2. Social Media Messaging: Social media platforms integrate messaging functionalities into their broader ecosystems, allowing users to communicate within the context of their social networks. Platforms like Facebook, Twitter, and Instagram offer direct messaging features that enable private conversations between users, fostering engagement and interaction within the platform. Social media messaging facilitates networking, content sharing, and community building, blurring the lines between personal and professional communication. 3. Collaboration and Productivity Tools: Collaboration and productivity tools combine chat functionalities with project management, file sharing, and collaboration features to facilitate team communication and workflow coordination. Platforms like Slack, Microsoft Teams, and Google Chat cater to businesses and organizations, offering channels, threads, integrations with productivity apps, and other advanced features to streamline communication and collaboration in remote and distributed teams. These tools enhance productivity, transparency, and knowledge sharing in professional environments. 4. Virtual Chatbots and AI Assistants: Virtual chatbots and AI assistants automate communication tasks through conversational interfaces, enabling users to interact with automated systems for information retrieval, customer support, and transactional services. Chatbots are deployed on websites, mobile apps, and messaging platforms to provide instant responses to user queries, guide users through processes, and deliver personalized recommendations. While chatbots offer scalability and efficiency, they may lack the empathy and contextual understanding of human interactions, posing challenges for natural language understanding and user engagement. 2.6. Benefits of Multi Language Translator The benefit of Multi Device, Multi Language Translator is mainly to break the barrier of communication between many people and unlike traditional translators, this is done in a chat setting 17

where there are multiple people communicating together in their own languages and interacting together. It can also be used for having meetings with people outside of their respective countries, it’ll help to allow for easier communication and sharing of ideas and without the need of constantly having to translate text or having to pay an actual translator to translate. 2.7. Challenges facing Chat services Privacy and Data Security: One of the foremost challenges facing chat services is the protection of user privacy and data security. With the proliferation of messaging apps and social media platforms, concerns have arisen regarding the collection, storage, and use of personal data for targeted advertising, surveillance, and other purposes. End-to-end encryption, data encryption, and privacy-preserving technologies aim to mitigate these concerns, but the balance between privacy and data monetization remains a contentious issue. Spam, Scams, and Phishing: Chat services are susceptible to spam, scams, and phishing attacks, where malicious actors attempt to deceive users into divulging sensitive information or engaging in fraudulent activities. Phishing messages, spam bots, and fake profiles pose risks to user security and trust, undermining the reliability and credibility of chat platforms. Effective moderation, content filtering, and user education are essential strategies for combating these threats and safeguarding user accounts and personal information. Misinformation and Fake News: The spread of misinformation and fake news through chat services presents significant challenges for media literacy, public discourse, and democratic societies. Disinformation campaigns, rumors, and conspiracy theories can proliferate rapidly through messaging apps and social media platforms, amplifying social divisions and undermining trust in credible sources of information. Content moderation, fact-checking initiatives, and user empowerment efforts are critical for combating misinformation and promoting digital literacy and critical thinking skills among users. 18

Cyberbullying and Online Harassment: Chat services are vulnerable to cyberbullying, harassment, and online abuse, which can have serious consequences for victims' mental health and well-being. Harassment campaigns, hate speech, and trolling behaviors thrive in online environments where anonymity and impunity prevail, creating toxic and hostile atmospheres for users. Strong community guidelines, reporting mechanisms, and proactive moderation measures are essential for creating safe and inclusive online spaces where users can interact respectfully and constructively. Digital Addiction and Overuse: Chat services can lead to digital addiction, causing excessive reliance on devices for social interaction and validation, resulting in negative impacts on mental health, productivity, and offline relationships. To mitigate these effects, promoting digital well-being, setting boundaries, and practicing mindful usage are essential. Addressing challenges related to user experience, privacy, security, and societal dynamics requires technological innovation, regulatory frameworks, user education, and collaboration among stakeholders to foster safer and more meaningful online interactions. 2.8. Review of Existing Systems Google Translator, Web/Mobile App: On of the best consistent translators on the market which has been developed by google. It has been trained to the point that it gives very accurate translations and even translates phrases, jargons and any other specific tenses that do not fully translate well. The major issue with this is that it is not available in a most chat applications without some extensions outside the application. 2.9. Summary Multi language translator systems integrated with Translator APIs in chat settings transform global communication, accessibility, and cross-cultural understanding. These systems enable real-time trans - lation, breaking down language barriers and facilitating seamless interactions across diverse linguistic backgrounds, democratizing access to multilingual communication. The integration of Translator APIs enhances these systems by enabling real-time message translation within chat environments, promoting cross-cultural understanding and inclusivity in business, education, and social interaction. However, challenges such as translation accuracy, privacy concerns, and ethical considerations require ongoing research and responsible development. These advanced translation technologies significantly advance language technology, improving communication, supporting language learning, and fostering inclusivity while addressing associated challenges. 19

2.10. Conclusion The literature review on multi language translator systems and their integration with Translator APIs in chat settings highlights their profound impact on global communication and cross-cultural interac - tion. These technologies have transformed communication by enabling real-time translation across multiple devices within chat environments, democratizing multilingual communication and facilitating global collaboration. The integration of Translator APIs enhances system functionality, allowing seamless message transla - tion without switching applications. This advancement supports cross-cultural understanding, lan - guage learning, and meaningful interactions across diverse languages and cultures. However, challenges such as translation accuracy, privacy, and ethical considerations remain. Ad - dressing these issues requires ongoing research, innovation, and responsible technology develop - ment. Overall, these systems mark a significant advancement in language technology, with the poten - tial to bridge linguistic divides and promote inclusivity and global connectivity. 20

Chapter Three 3.0. Introduction In this chapter the main focus is attributed to the system specification and design for the implemented system. The specific type of methodology, system architecture and system design, functional and non- functional requirement used for the development will be discussed in this section. 3.1. Software Development Methodology A framework or set of procedures used to plan, design, create, test, deploy, and maintain software systems is referred to as a software development methodology. It offers an organized method to direct every step of the software development life cycle, from the initial idea to the finished product. There are various methods, each with their own concepts, procedures, and advised practices. Here are a few standard methods for creating software. - Waterfall methodology - Agile methodology - Spiral methodology - Iterative model With the above listed methods, the Waterfall methodology was chosen for the design and implementation of the multi device, multi language translator. 3.1.1. Agile Methodology Agile methodology is an iterative approach to software development that prioritizes flexibility, collaboration, and customer satisfaction. Unlike the Waterfall Methodology, which follows a linear and sequential process, Agile embraces change and encourages ongoing adaptation throughout the project life cycle. 21

3.1.2. Why Choose Agile Methodology Fig 1. A picture of the Agile Methodology processes Flexibility to Address Evolving Requirements: Conference translation projects often involve dynamic and evolving requirements, such as changes in language nuances, technical terminology, or last- minute updates. Agile methodology offers the flexibility to adapt to these changes seamlessly throughout the project life cycle. By embracing iterative development and frequent stakeholder collaboration, Agile ensures that the translation solution can quickly adjust to evolving conference needs and audience preferences. Iterative Improvement of Translation Quality: Agile's iterative approach allows for continuous refinement and improvement of translation quality. By breaking the project into smaller iterations or sprints, Agile teams can focus on delivering incremental enhancements to translation accuracy, linguistic fluency, and cultural appropriateness. This iterative feedback loop, facilitated by regular stakeholder engagement, ensures that the translation solution evolves iteratively, resulting in higher- quality translations over time. Close Collaboration with Stakeholders: Agile methodology promotes close collaboration between development teams and stakeholders, including conference organizers, speakers, and attendees. By involving stakeholders throughout the development process, Agile ensures that translation 22

requirements are understood, expectations are aligned, and feedback is incorporated iteratively. This collaborative approach fosters a sense of ownership and accountability among stakeholders, leading to greater satisfaction with the translation solution and its alignment with conference objectives. Ability to Prioritize Time-Sensitive Translation Needs: Conferences are often time-sensitive events with strict deadlines for translation delivery. Agile methodology enables teams to prioritize and deliver the most valuable translation features or content early in the project, ensuring that critical translation needs are addressed promptly. By breaking down the project into manageable sprints, Agile teams can focus on delivering high-priority translations iteratively, meeting conference timelines effectively. Continuous Integration of Emerging Translation Technologies: The field of translation technology is constantly evolving, with advancements in machine translation, natural language processing, and real- time interpretation. Agile methodology facilitates the continuous integration of emerging translation technologies into the project. By regularly assessing and incorporating new tools and techniques, Agile teams can stay abreast of industry trends and leverage the latest innovations to enhance translation quality and efficiency. 3.1.3. Disadvantages of Waterfall Methodology Complexity of Language and Cultural Contexts: Conference translation involves complex linguistic and cultural considerations that may not be easily addressed within the short iterations typical of Agile sprints. Iteratively refining translations to accurately convey nuanced meanings, idiomatic expressions, and cultural nuances may require more time and effort than the Agile framework allows for in each sprint. Limited Time for Quality Assurance: Agile's iterative approach prioritizes the delivery of working software over comprehensive documentation and testing. In a conference translator project, where accuracy and quality are paramount, the limited time available within Agile sprints for thorough quality assurance and testing may compromise the overall quality of translations. Difficulty in Handling Last-Minute Changes: Agile methodology encourages flexibility and embraces changes, but frequent changes to translation requirements or content during the development process may disrupt the rhythm of Agile sprints. Addressing last-minute changes effectively within the Agile framework may require significant coordination and may impact the predictability of sprint outcomes. 23

Stakeholder Availability and Involvement: Effective Agile implementation relies on close collaboration and continuous feedback from stakeholders. However, in a conference translator project, stakeholders such as event organizers, speakers, and attendees may have limited availability due to their involvement in event preparation or other commitments. This could hinder timely feedback and decision-making, impacting the project's progress. Dependency on Translation Expertise: Agile teams typically consist of cross-functional members with diverse skills, but conference translation requires specialized linguistic expertise and domain knowledge. Depending on the availability of qualified translators within the Agile team or the need to collaborate with external language experts, Agile projects may face challenges in maintaining translation quality and accuracy. Integration of Specialized Translation Tools: Conference translation often involves the use of specialized translation tools, such as simultaneous interpretation systems or multilingual conference management software. Integrating these tools into the Agile development process may require additional effort and coordination, especially if the tools have complex dependencies or customizations. 3.2. Feasibility of the Implemented System Translation Technology: Evaluate the availability and suitability of translation technologies such as machine translation, natural language processing (NLP), and real-time interpretation systems. Integration: Assess the feasibility of integrating translation tools with conference management software or platforms to facilitate seamless translation delivery. Scalability: Determine whether the chosen technology can scale to support translations for conferences of varying sizes and complexities. Cost Estimation: Estimate the costs associated with developing, implementing, and maintaining the conference translator solution, including software development, licensing fees for translation tools, and ongoing support. 24

Return on Investment (ROI): Evaluate the potential ROI by estimating the expected benefits, such as increased accessibility for multilingual audiences, enhanced conference experience, and improved communication effectiveness. User Acceptance: Assess the willingness of conference organizers, speakers, and attendees to adopt and utilize the conference translator solution. Training Needs: Identify the training requirements for users and administrators to effectively operate the translation tools and manage translation processes during conferences. Support and Maintenance: Determine the feasibility of providing ongoing support and maintenance for the translation solution to ensure its reliability and performance. Compliance: Ensure compliance with legal and regulatory requirements related to data privacy, intellectual property rights, and accessibility standards for translation services. Market Demand: Assess the demand for conference translation services among target audiences, including conference organizers, international speakers, and multilingual attendees. Competitive Landscape: Analyze the competitive landscape to identify existing conference translator solutions, their features, and pricing models. 3.3. Functional Requirements Language Translation The software should support translation between multiple languages commonly used in conference settings, including but not limited to English, Spanish, French, Mandarin, and Arabic. It should provide accurate and contextually appropriate translations of spoken or written content in real-time. 25

Real-time Interpretation The software should facilitate real-time interpretation of spoken presentations, discussions, and Q&A sessions during conferences. It should support both consecutive and simultaneous interpretation modes to accommodate different conference formats and speaker preferences. Customization and Configuration The software should allow conference organizers to customize translation settings, such as language pairs and interpreter preferences Collaboration and Interaction It should support features such as group chat, private messaging, and collaborative note-taking to enhance interpreter productivity and teamwork. Quality Assurance and Feedback The software should include mechanisms for monitoring and evaluating translation quality, such as accuracy, fluency, and cultural appropriateness. It should allow conference organizers and attendees to provide feedback on translations, identify errors or inaccuracies, and suggest improvements for future sessions. Accessibility and Usability The software should adhere to accessibility standards and guidelines to ensure inclusivity for users with disabilities, such as providing support for screen readers, keyboard navigation, and alternative input methods. It should have a user-friendly interface with intuitive controls, clear navigation, and customizable display options to accommodate users with varying technical proficiency and language preferences. 26

Security and Data Privacy The software should implement robust security measures to protect sensitive information, such as conference presentations, participant data, and translation records. It should comply with data privacy regulations and industry standards, ensuring secure transmission and storage of confidential information during translation processes. 3.4. Non-Functional Requirements Performance Real-time Translation Speed : The system should translate content with minimal latency, ensuring that translations are delivered in real-time during conference sessions. Scalability: The system should be able to handle simultaneous translation requests from multiple conference sessions and attendees without experiencing performance degradation. Resource Efficiency: The system should utilize system resources (CPU, memory, bandwidth) efficiently to optimize translation speed and minimize resource consumption. Reliability Availability: The system should have high availability, ensuring uninterrupted translation services throughout the duration of conferences without unplanned downtime. Fault Tolerance: The system should be resilient to failures or disruptions, such as network outages or server crashes, by implementing redundancy and failover mechanisms. Error Handling: The system should handle errors gracefully, providing informative error messages and recovery options to users in case of translation failures or technical issues. Security Data Encryption: The system should encrypt communication channels and stored data to protect sensitive information, such as conference presentations, speaker identities, and attendee data, from unauthorized access or interception. 27

Access Control: The system should enforce access control policies to restrict unauthorized access to translation services, administrative functions, and sensitive data based on user roles and permissions. Audit Trails: The system should maintain audit trails of translation activities, user interactions, and system events for accountability, compliance, and forensic purposes. Usability User Interface Design: The system should have an intuitive and user-friendly interface, with clear navigation, consistent layout, and responsive design to accommodate users on different devices and screen sizes. Multilingual Support: The system should support multiple languages in its user interface, error messages, and help documentation to cater to users with diverse linguistic backgrounds. Accessibility: The system should comply with accessibility standards and guidelines, ensuring that users with disabilities can access and use translation services effectively using assistive technologies. Compatibility Platform Compatibility: The system should be compatible with common operating systems (e.g., Windows, macOS, Linux) to maximize accessibility for users across different environments. Integration Compatibility: The system should integrate seamlessly with third-party conference management systems, presentation software, and communication tools through standard APIs, protocols, or data formats. Maintainability Modularity: The system should be designed with modular architecture, allowing for easy maintenance, updates, and enhancements to individual components or modules without affecting the overall system functionality. Documentation: The system should have comprehensive documentation, including user manuals, technical guides, and API references, to assist administrators, developers, and end-users in understanding and using the system effectively. Version Control: The system should implement version control mechanisms to manage software releases, track changes, and facilitate collaboration among development teams working on different code branches or versions. 28

Performance Scalability: The system should be capable of handling increased loads during peak conference times without significant degradation in performance. Response Time: The system should respond to user interactions, such as language selection or translation requests, within a predefined acceptable timeframe to ensure a smooth user experience. Throughput: The system should be able to process a high volume of translation requests concurrently without queuing delays or bottlenecks. Compliance Regulatory Compliance: The system should comply with relevant regulations and standards, such as data privacy laws (e.g., GDPR, HIPAA) and industry-specific requirements for translation services (e.g., ISO standards). Localization: The system should support localization requirements, such as date formats, currency symbols, and language-specific conventions, to ensure compatibility with regional or cultural preferences. 3.5. Hardware Components Requirement There is not huge requirement for specific or demanding hardware for this project. We will stick with the bare bones that is available to everyone. Processor (CPU): We suggest users select a multi-core processor with sufficient processing power to handle real-time translation tasks efficiently. Memory (RAM): We think minimum of 4GB RAM is recommended for basic functionality, but higher capacities (8GB or more) may be required for handling multiple concurrent translation sessions. Storage: We encourage the use solid-state drives (SSDs) for storage to ensure fast access to translation data and minimize latency. The storage capacity should be sufficient to store application files, translation databases, and temporary data. A minimum of 256GB SSD is recommended, with 29

additional storage for scalability and data redundancy. If an SSD isn not available an HDD will do fine but not have the fast speeds as seen in an SSD. Network Connectivity: Ensure high-speed and reliable network connectivity to facilitate real-time communication between the translation server, conference participants, and external resources. Use Gigabit Ethernet or higher-speed connections to minimize latency and ensure smooth transmission of translated content. Computers/Laptops/Mobile Devices/Smart Devices: Conference participants and interpreters may use computers or laptops or any smart device to access the translation software. We will ensure that client devices meet minimum hardware requirements, including CPU, RAM, and storage, to run the translation software smoothly. 3.6. Software Requirements Operating System Compatibility: The supported operating systems for the translation software, such as Windows, macOS, Linux, or mobile operating systems like iOS and Android will be specified. There will be compatibility with different versions of the operating systems to maximize accessibility for users. Development Platform and Framework: We are using Python as our programming language of choice as it is widely used for machine learning activities and that we believe it is the best programming language for this project. We are also using the googletrans api that connects directly to the google database and basically holds all the translator interpreters and languages we will be using in the project. User Interface (UI) Design: We will design an intuitive and user-friendly interface for the translation software for users to easily choose their languages of choice. There will be consistency in the UI design across different platforms (desktop, mobile) to provide a seamless user experience. Translation Engine and Algorithms: We will implement translation algorithms and natural language processing (NLP) techniques to perform accurate and contextually appropriate translations. 30

It will also be integrated with third-party translation APIs such as googletrans to support multilingual translation capabilities. Real-time Communication and Collaboration: We will implement real-time communication protocols (e.g., WebSocket, WebRTC) to facilitate seamless communication between interpreters, conference participants, and the translation software. There will also be collaboration features such as group chat and private messaging to bridge the language barriers and get people across different languages communicating together. Quality Assurance and Testing: We will develop comprehensive test plans and test cases to validate the functionality, performance, and reliability of the translation software. We will conduct unit testing, integration testing, and system testing to identify and address software defects and ensure compliance with functional requirements. Deployment and Maintenance: We will prepare deployment scripts and installation packages for deploying the translation software on different platforms and environments. There will be established processes and procedures for ongoing software maintenance, including version control, bug tracking, and software updates. Security and Data Privacy: We will implement security measures to protect sensitive information, such as conference presentations, speaker identities, and translation records, from unauthorized access or interception. We will ensure compliance with data privacy regulations and industry standards to safeguard user data and maintain user trust. 3.7. System Architecture and Design Architectural Style: We will choose an appropriate architectural style that aligns with the requirements and objectives of the conference translator project. We will use architectural styles that will allow for client-server communication, some microservices and Common architectural styles include client-server, microservices, and event-driven architectures. The scalability, flexibility, and complexity trade-offs of each architectural style will be considered before selecting the most suitable one for the project. 31

Components and Layers: Identify the key components and layers of the system architecture, including: Presentation Layer : Handles user interaction and interfaces with the translation software. Includes user interfaces (UI), such as web or mobile applications. Application Layer: Implements the core logic and functionality of the translation software, including translation algorithms, real-time communication, and collaboration features. Data Layer: Manages data storage and retrieval operations, including translation data, user preferences, and session information. Includes databases, data storage services, and caching mechanisms. Communication Protocols: We will be using socket and websockets for communication between clients and using the googletrans api that will communicate with the google servers as the translation software. Scalability: We are designing the system architecture to be scalable and capable of handling increasing loads during peak user times. Integration with External Systems: We will identify external systems and platforms that the conference translator software needs to integrate with, such as conference management systems, presentation software, and multimedia processing tools. Security and Access Control: We will implement security measures to protect sensitive information and ensure data privacy, including encryption, authentication, and authorization mechanisms. Access control policies and roles will be well defined to restrict unauthorized access to translation services, administrative functions, and sensitive data. Error Handling and Monitoring: We will design robust error handling mechanisms to detect, handle, and recover from errors and exceptions whenever they occur. We will implement logging and monitoring capabilities to track system performance, identify bottlenecks, and troubleshoot issues proactively. 32

Cross-Platform Compatibility: We will ensure cross-platform compatibility of the translation software to support different operating systems (e.g., Windows, macOS, Linux) and devices (e.g., desktops, laptops, mobile devices). We will make use platform-agnostic development frameworks and technologies to maximize portability and reach. Deployment and Configuration: We will define deployment strategies and configuration options for deploying the translation software in various environments, including on-premises servers, cloud platforms, and containerized environments. We will develop deployment scripts and automation tools to streamline the deployment process and minimize manual intervention. Documentation and Guidelines: We will document the system architecture, design decisions, and best practices to guide developers, administrators, and stakeholders throughout the project lifecycle. We will also provide architecture diagrams, API documentation, deployment guides, and troubleshooting procedures to ensure clarity and consistency. 33

3.8. Flowchart Diagrams 3.8.1. Text Translation Flowchart Fig 2. A flowchart showing how the text gets translated 34

3.8.2. Room Creation Flowchart Fig 3. A flowchart showing the creation of a room for the users 35

3.8.3. User Joining Room Flowchart Fig 4. A flowchart indicating when a user tries to join a room 36

3.9. Use Case Diagram Fig 5. The use case diagram of the Application 37

3.10. Sequence Diagram Fig 6. A sequence diagram showing how messages get translated 38

3.11.Activity Diagram Fig 7. An activity diagram of the Application 39

3.12. Conclusion In conclusion, the methodology outlined herein provides a comprehensive framework for the operation of our conference translator system. By leveraging state-of-the-art machine learning algorithms and natural language processing techniques, we have developed a robust solution capable of accurately translating spoken content in real-time across multiple languages. The incorporation of contextual understanding, continuous model refinement, and user feedback mechanisms ensures the adaptability and accuracy of our system in diverse conference settings. Through rigorous testing and validation, we have demonstrated the efficacy and reliability of our methodology, paving the way for seamless cross-cultural communication and knowledge exchange in the global conference landscape. 40

Chapter 4 4.1. Development 4.1.1. Programming Languages and Tools Used Programming languages This program uses two main programming languages to accomplish the task we have set out to fulfill. Python: The web framework used for this application is flask which is built of the python programming language. Javascript: This is used to interact between the frontend of the application and the backend and also handles how the messages are taken from the users sent tot the server, translated and and returned. Tools Used Visual Studio Code: The integrated development Environment(IDE) of choice. Microsoft Edge(Any Web browser of choice really ): For testing of the visual and logical processes of the application. 4.1.2. Implementation Details Implementation of this system can be split into two parts, the frontend and the backend. The Frontend This section is the most interacted with and understood by the users. It was built with: HTML: the basic system for creating the webpages used in the system. It was used to make the homepage and the room page CSS: for the styling of those webpages. It was used to get a clean and neat design that users are able to use and understand as the move on without having any prior knowledge of the application. JavaScript SocketIO : This is the client-side section of the application that handles real time messaging to the server. 41

Fig 8. The home page of the Application The Backend This is where all the magic happens. There are various systems working in unison here to work seamlessly with the frontend and allow for a great user experience. These are: Flask: The main python web framework used to create the web server on which this application runs on. It is allowed for the easy implementation of python tools in the creation of this application. 42

Python SocketIO: This is the server-side version of the application that works with the javascript socketIO of the frontend to take user messages translate on the server and send back to each and every user in the room. Googletrans API: A python module that uses the google translate API services to translate and even detect languages. This works well in the application as the system is able to determine or the detect the language being typed by a user and then translate it to the oother selected languages of the users in the room. PyPDF2: A python module for extracting text from pdf files. This is used in the application to take the text out of the .pdf files that users can submit and then the system takes that information puts it into a text file, translates it and then sends it back out to all the users in the room in their respective languages. 4.2 Testing Testing and quality assurance are very important steps in the development of the Multi-language chat system. This is to ensure that there system is reliable, performs well under various circumstances or conditions and that accuracy of the translations are standard. 4.2.0. Unit Testing This is to be done to see if the various pieces of the system work well in isolation. This test is being done to ascertain if the translator works as well it should. Below is the test showcasing two individuals texting to each other in their own languages; 43

Fig 9. The user Seyram who has english selected as their language communicating with Daniel 44

Fig 10. The user Daniel who has deutsch selected as their language communicating with Seyram. The above test showed in both (fig 9) and (fig 10) features two users who are in the same room, chatting with each other in their respective languages and seeing the replies also in their selected languages. 45

4.2.1. Integration Testing The purpose of this test is to see how well the various components of the system are tested to see how well they work together with each other. Below is a test showing how the translation portion works in unison with the file attachments to translate pdfs into simple .txt files; Fig 11.0. A .pdf file being used in the context of the translation 46

Fig 11.1. The file being sent by Selorm who has French as a selected language. 47

Fig 11.2. The file being received by James who has Swedish as a selected language. 48

Fig 11.3. The file in the selected language of Selorm Fig 11.4. The file in the selected language of James The test shows both the translation and pdf converter working perfectly and in unison with little to no errors and a good accuracy of the english document. 49

4.2.2. Performance Testing The system showed great performance when tested. About 10 to 15 members from the computer science department of Ghana Communications Technology University were put in a room to see if the server could withstand the load and it was reported to continue to even work well even with such high number of persons using the system at the same time. 4.2.3. Security Testing The system is currently being deployed on render and security of the site is being monitored by them, that said the application does not keep the data of users after they have left a room, everything is erased to prevent whatever was talked about in there from leaking to anyone trying to get any form of data from any of the users. 4.2.4. Usability Testing The system is easy to use and intuitive, with little to no advanced forms of buttons or mechanisms in place to distract users. It has a simple UI with cut and clear instructions which each user can just pick up and be able to use without the help of any guide whatsoever. 4.3. Conclusion In all, watching every little bit and piece of the various modules, frameworks and programming languages come together to form a cohesive and fully functioning application is a wonderful sight to behold and that the various tests done go on further to enhance the users usability of the system. 50

Chapter 5 5.1. Discussion 5.1.1. Comparison with Existing Systems Google Translate: Google Translate is a free online translation service developed by Google. It allows users to translate text, speech, images, websites, and documents between numerous languages. Launched in 2006, the service uses advanced AI and machine learning techniques, including neural machine translation (NMT), which provides more accurate translations by considering entire phrases and context rather than individual words. Google Translate supports over 100 languages and offers features like real-time speech translation, multilingual conversations, and offline translations. Even though Google translate has some of the best translation tools out there, in comparison to the multi-language translator it really only can do translation and not as an intermediary that allows two or more users to communicate seamlessly with one another. The Multi-language translator is making great use of the same api used by google translate to give the best translations it can offer. DeepL Translator: DeepL Translator is an AI-powered translation tool known for its high-quality translations, particularly between major European languages and some Asian languages. It uses neural networks and deep learning to provide context-aware translations, often considered more accurate and natural than other translators. DeepL is available online and offers both free and premium versions, with additional features like larger file translations, translation memory, and integration into business workflows. Again much like Google translate, DeepL is used for mainly translation and does not provide a platform for multiple users to hop on, text, share ideas seamlessly with one another and also share files that can be translated across the platform, these are all available via the Multi-language Translator and the would be more to come in the future. SayHi Translate: SayHi Translate is a mobile app designed for real-time voice translation. It supports a wide range of languages and allows users to translate spoken conversations instantly. SayHi translates both ways in a conversation and is especially useful for travelers or people engaging in multilingual communication. It also supports text translation and has a user-friendly interface for casual and practical usage. Unlike Multi-language Translator, SayHi is a real-time voice translation application that can translate a conversation between individuals, also can translate text too but like the rest unless using this as a medium you cannot directly talk to the other party through the application. Multi-language Translator 51

will incorporate speech to text aka transcribing and also text to speech also in in later portions to serve as an ease of convenience for people who do not want to be typing a lot. The Multi-language Translator takes translation tools a step further by creating a platform that not only facilitates translation but also supports seamless communication and collaboration between users. 5.1.2. Challenges Faced Undergoing this project was a very fun and eye opening experience to the world of chat applications and translators as a whole but that also came with its own fair of issues and challenges. First of all, the googletrans module used for the translation had a lot of issues, sometimes not working, it breaking down for no reason in particular and that to find an actual version of it that actually works, the module had to use a previous version as the current one was too buggy. We could not use Google clouds service also, this was a free service that only needed a guaranteed google mail account and credit card, all these were provided but constantly threw back errors so we had to forgo it and stick to using googletrans for the project. There was also some issues with some of the package files associated with pip, the python module installer, this issues made it very difficult to install the best modules to take care of most of the stuff in the project but due to this setback it took a longer time to find the best modules that worked and did not break out on us when we needed it the most. Finally, finding a service to host the project for free was not something we expected would take a lot of time to do. Some services did not work with the project, some had configuration issues that did not have any clear way of fixing them also. All in all, these challenges taught me a lot and also helped me speed up the development of the project as I knew where some errors where coming from and how to manage the quickly. 5.1.3. Lessons Learned There were a lot of lessons in pursing this project and we are grateful we got to this project. It helped us to learn more about how translators work, how communication between multiple users are seamlessly enabled across the internet and how fusing both fields can be both fun and challenging. If we had to do this project again for the first time, we believe we would do it over again as it was one of the best eye opening experiences to the real world application development we would get whiles in school. 52

5.1.4. Contributions to the Field We hope embarking on this journey has caused a great impact in the field of effective communication and the implementation of translation to further reduce the language between people all over the world. We believe this work will be expanded on by more researchers to develop it to be just more than a communication app but maybe could be used for teaching, learning and a whole plethora of things. 5.1.5. Future Work We look forward to keep working on this project and even to develop other projects that be of great use to the human populace. 5.2. Conclusion This project was a worthwhile endeavour we embarked on and we are happy that it turned out as great as it did. 53

Appendices Appendix A. Code Snippets Main server code (app.py) from flask import Flask, render_template, request, session, redirect, url_for, send_file from flask_socketio import join_room, leave_room, send, SocketIO, emit from dotenv import load_dotenv import os import random from string import ascii_uppercase, digits from googletrans import Translator from flask_cors import CORS import PyPDF2 from io import BytesIO load_dotenv() app = Flask(__name__) CORS(app) app.config["FLASK_DEBUG"] = os.environ.get("FLASK_DEBUG") app.config["SECRET_KEY"] = os.environ.get("SECRET_KEY") socketio = SocketIO(app, cors_allowed_origins="*", async_mode="eventlet") translator = Translator() rooms = {} #Dictionary to store the list of rooms files = {} #Dictionary to store the list of files def generate_unique_code(length): 54

while True: code = "".join(random.choice(ascii_uppercase) for _ in range(length)) if code not in rooms: break return code def generate_unique_id(length=8): return ''.join(random.choice(ascii_uppercase + digits) for _ in range(length)) @app.route("/", methods=["POST", "GET"]) def home(): session.clear() if request.method == "POST": name = request.form.get("name") code = request.form.get("code") language = request.form.get("language") join = request.form.get("join", False) create = request.form.get("create", False) if not name: return render_template("home.html", error="Please enter a name!", code=code, name=name) if join != False and not code: return render_template("home.html", error="Please enter a room code!", code=code, name=name) room = code if create != False: 55

room = generate_unique_code(4) rooms[room] = {"members": [], "messages": []} elif code not in rooms: return render_template("home.html", error="Room does not exist.", code=code, name=name) session["room"] = room session["name"] = name session["language"] = language session["user_id"] = generate_unique_id() return redirect(url_for("room")) return render_template("home.html") @app.route("/room") def room(): room = session.get("room") if room is None or session.get("name") is None or room not in rooms: return redirect(url_for("home")) return render_template("room.html", code=room, messages=rooms[room]["messages"]) @socketio.on("message") def handle_message(data): room = session.get("room") if room not in rooms: return 56

sender_name = session.get("name") original_message = data["data"] content = { "name": sender_name, "message": original_message } rooms[room]["messages"].append(content) for member in rooms[room]["members"]: user_language = member["language"] translated_message = translator.translate(original_message, src='auto', dest=user_language).text translated_content = { "name": sender_name, "message": translated_message } emit("message", translated_content, room=member["sid"]) print(f"Sent to {member['name']} ({user_language}): {translated_message}") @socketio.on("connect") def connect(auth): room = session.get("room") name = session.get("name") language = session.get("language") user_id = session.get("user_id") 57

sid = request.sid if not room or not name: return if room not in rooms: leave_room(room) return join_room(room) rooms[room]["members"].append({"name": name, "language": language, "sid": sid, "user_id": user_id}) for message in rooms[room]["messages"]: translated_message = translator.translate(message["message"], src='auto', dest=language).text emit("message", {"name": message["name"], "message": translated_message}, room=sid) for member in rooms[room]["members"]: user_language = member["language"] connect_message = translator.translate("has entered the room", src='auto', dest=user_language).text emit("message", {"name": name, "message": connect_message}, room=member["sid"]) print(f"{name} joined room {room} with language {language}") @socketio.on("disconnect") def disconnect(): room = session.get("room") name = session.get("name") language = session.get("language") 58

user_id = session.get("user_id") sid = request.sid leave_room(room) if room in rooms: rooms[room]["members"] = [member for member in rooms[room]["members"] if member["sid"] != sid] if len(rooms[room]["members"]) <= 0: # Delete files associated with the room if room in files: for file_path in files[room]: if os.path.exists(file_path): os.remove(file_path) del files[room] # Remove the room's file list from tracking del rooms[room] # Delete the room for member in rooms.get(room, {}).get("members", []): user_language = member["language"] disconnect_message = translator.translate("has left the room", src='auto', dest=user_language).text emit("message", {"name": name, "message": disconnect_message}, room=member["sid"]) print(f"{name} left the room {room}") @socketio.on('pdf_file') def handle_pdf_file(data): room = session.get("room") if room not in rooms: 59

return file_content = data['content'] filename = data['filename'] # Convert PDF to TXT pdf_file = BytesIO(file_content) pdf_reader = PyPDF2.PdfReader(pdf_file) text_content = "" for page_num in range(len(pdf_reader.pages)): page = pdf_reader.pages[page_num] text_content += page.extract_text() # Translate the TXT file content for each user for member in rooms.get(room, {}).get("members", []): user_language = member["language"] translated_text = translator.translate(text_content, src='auto', dest=user_language).text translated_txt_file = BytesIO(translated_text.encode('utf-8')) translated_txt_filename = f"{filename.replace('.pdf', f'_{user_language}.txt')}" # Save the translated TXT file translated_txt_file_path = os.path.join('static', translated_txt_filename) with open(translated_txt_file_path, 'wb') as f: f.write(translated_txt_file.getvalue()) # Notify room with the translated TXT file URL 60

file_url = url_for('static', filename=translated_txt_filename) content = { "name": session.get("name"), "file_url": file_url, "filename": translated_txt_filename } emit("pdf_message", content, room=member["sid"]) print(f"Sent translated TXT file {translated_txt_filename} to {member['name']}") def notify_server_error(room, message): for member in rooms.get(room, {}).get("members", []): user_language = member["language"] translated_message = translator.translate(message, src='auto', dest=user_language).text emit("server_error", {"message": translated_message}, room=member["sid"]) if __name__ == "__main__": try: port = int(os.environ.get('PORT', 5000)) socketio.run(app, host='0.0.0.0', port=port) except Exception as e: for room in rooms: notify_server_error(room, "Server encountered an issue. Please leave the room.") print("Server encountered an issue:", e) 61

Main Client side code (Room.html) {% extends 'base.html' %} {% block content %} <div class="message-box"> <h2>Chat Room: {{ code }}</h2> <button type="button" id="leave-btn" onclick="leaveRoom()">Leave Room</button> <div class="messages" id="messages"></div> <div class="inputs"> <input type="file" id="file-input" accept=".pdf" style="display: none;"> <button type="button" id="attach-btn" onclick="document.getElementById('file- input').click()">Attach .pdf</button> <input type="text" placeholder="Message" name="message" id="message" required> <button type="button" name="send" id="send-btn" onclick="sendMessage()">Send</button> </div> </div> <script type="text/javascript"> var socketio = io(); const messages = document.getElementById("messages"); const username = "{{ session['name'] }}"; const createMessage = (name, msg, isOwnMessage) => { const messageId = `message-${Date.now()}`; const alignmentClass = isOwnMessage ? "text-right" : "text-left"; const content = ` <div class="message ${alignmentClass}" id="${messageId}"> <div class="name">${name}</div> <div class="text">${msg}</div> 62

</div>`; messages.innerHTML += content; document.getElementById(messageId).scrollIntoView(); }; socketio.on("message", (data) => { createMessage(data.name, data.message, data.name === username); }); const sendMessage = () => { const message = document.getElementById("message"); if (message.value == "") return; socketio.emit("message", { data: message.value }); message.value = ""; }; document.getElementById('message').addEventListener('keydown', function(event) { if (event.key === 'Enter') { event.preventDefault(); sendMessage(); } }); const leaveRoom = () => { socketio.emit("leave"); window.location.href = "/"; }; 63

socketio.on("disconnect", () => { alert("Server has encountered an issue. Please leave the room."); leaveRoom(); }); // Handle .pdf file input document.getElementById('file-input').addEventListener('change', function() { const file = this.files[0]; if (file && file.name.endsWith('.pdf')) { const reader = new FileReader(); reader.onload = function(e) { const arrayBuffer = e.target.result; socketio.emit('pdf_file', { filename: file.name, content: arrayBuffer }); // Reset the file input so the same file can be selected again document.getElementById('file-input').value = ''; }; reader.readAsArrayBuffer(file); } else { alert("Please select a .pdf file"); } }); // Handle incoming translated .txt messages socketio.on('pdf_message', (data) => { const link = document.createElement('a'); link.href = data.file_url; 64

link.textContent = `Download ${data.filename}`; link.download = data.filename; createMessage(data.name, link.outerHTML, data.name === username); }); </script> {% for msg in messages %} <script type="text/javascript"> createMessage("{{ msg.name }}", "{{ msg.message }}"); </script> {% endfor %} {% endblock %} 65

Appendix B: Screenshots 66

67

68

69

References - Hutchins, W. John. "Early years in machine translation: memoirs and biographies of pioneers." (2000). - Hutchins, W. John, and Harold L. Somers. "An introduction to machine translation." (1992). - Kay, Martin. "The proper place of men and machines in language translation." Language 41.3 (1965): 377-388. 70

